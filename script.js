var currentResponse = '';
var chatSessions = JSON.parse(localStorage.getItem('chatSessions')) || [];
var currentChatId = null;
var apiKey = localStorage.getItem('apiKey') || '';
var username = localStorage.getItem('username') || '';

window.onload = function () {
    // Check if user is logged in
    if (!apiKey || !username) {
        showLogin();
    } else {
        initializeChat();
    }
};

function initializeChat() {

    // Remove the 'hidden' class to show the chat elements
    document.getElementById('toggleSidebar').classList.remove('hidden');
    document.getElementById('sidebar').classList.remove('hidden');
    document.querySelector('.container').classList.remove('hidden');
    document.getElementById('signoutBtn').classList.remove('hidden');

    loadChatList();
    if (chatSessions.length > 0) {
        loadChat(chatSessions[0].id);
        document.getElementById('toggleSidebar').click();
    } else {
        createNewChat();
    }
}

// Show login form if not logged in
function showLogin() {
    const loginContainer = document.createElement('div');
    loginContainer.id = 'loginContainer';
    loginContainer.innerHTML =
        "<h2>Login</h2>" +
        "<p><strong>Note:</strong> By logging in, you agree to the following:</p>" +
        "<ul>" +
        "<li>Your API key and personal information are stored locally on this device only. This data is not transmitted to any external servers, but please ensure you are using a trusted and secure device.</li>" +
        "<li>This chatbot application is designed for informational purposes only. The data provided may not be fully accurate, complete, or up-to-date. We are not liable for any decisions or actions taken based on the responses generated by the chatbot.</li>" +
        "</ul>" +
        "<p><strong>Instructions:</strong></p>" +
        "<p>To use this application, you need to generate your API key:</p>" +
        "<ol>" +
        "<li>Register on the Cohere API website: <a href='https://dashboard.cohere.com/welcome/register' target='_blank'>Register Here</a></li>" +
        "<li>After registration, navigate to the API Keys section: <a href='https://dashboard.cohere.com/api-keys' target='_blank'>API Keys</a></li>" +
        "<li>Copy your API key and paste it below.</li>" +
        "</ol>" +
        "<label for='username'>Name:</label>" +
        "<input type='text' id='usernameInput' placeholder='Enter your name' required>" +
        "<label for='apiKey'>API Key:</label>" +
        "<input type='password' id='apiKeyInput' placeholder='Enter API Key' required>" +
        "<button id='loginButton'>Login</button>";



    document.body.appendChild(loginContainer);

    document.getElementById('loginButton').onclick = function () {
        username = document.getElementById('usernameInput').value;
        apiKey = document.getElementById('apiKeyInput').value;
        if (username && apiKey) {
            localStorage.setItem('username', username);
            localStorage.setItem('apiKey', apiKey);
            document.body.removeChild(loginContainer);
            initializeChat();
        } else {
            alert("Please enter both your name and API key.");
        }
    };
}


// Logout and clear all data
function logout() {
    localStorage.clear();
    location.reload();
}

// Sidebar toggle event
document.getElementById('toggleSidebar').onclick = function () {
    const sidebar = document.getElementById('sidebar');
    sidebar.classList.toggle('visible');
};

// New chat button event
document.getElementById('newChatButton').onclick = createNewChat;

document.getElementById('chatForm').addEventListener('submit', function (e) {
    e.preventDefault();
    const prompt = document.getElementById('prompt').value;
    document.getElementById('prompt').value = '';
    addMessage(prompt, 'user');
    saveMessage(prompt, 'user');
    getCohereResponse(prompt);
});

function createNewChat() {
    const newChat = { id: Date.now().toString(), name: "New Chat", messages: [] };
    chatSessions.push(newChat);
    saveChatSessions();
    loadChatList();
    loadChat(newChat.id);
}

function loadChatList() {
    const chatList = document.getElementById('chatList');
    chatList.innerHTML = '';

    chatSessions.forEach(function (chat) {
        const chatCard = document.createElement('button');
        chatCard.className = 'chat-card';
        chatCard.onclick = function () { loadChat(chat.id); };

        const chatName = document.createElement('span');
        chatName.className = 'chat-name';
        chatName.textContent = chat.name;

        const renameButton = document.createElement('button');
        renameButton.textContent = 'Rename';
        renameButton.onclick = function (e) {
            e.stopPropagation();
            editChatName(chat.id, chatName);
        };

        const deleteButton = document.createElement('button');
        deleteButton.textContent = 'Delete';
        deleteButton.onclick = function (e) {
            e.stopPropagation();
            deleteChat(chat.id);
        };

        chatCard.appendChild(chatName);
        chatCard.appendChild(renameButton);
        chatCard.appendChild(deleteButton);
        chatList.appendChild(chatCard);
    });
}

function loadChat(chatId) {
    currentChatId = chatId;
    const chat = chatSessions.find(function (c) { return c.id === chatId; });
    if (chat) {
        document.getElementById('welcomeMessage').textContent = 'Topic: ' + chat.name + '!';
        const chatBox = document.getElementById('chat');
        chatBox.innerHTML = '';
        chat.messages.forEach(function (message) {
            addMessage(message.text, message.type);
        });
        document.getElementById('toggleSidebar').click();
    }

}

function saveMessage(text, type) {
    const chat = chatSessions.find(function (c) { return c.id === currentChatId; });
    if (chat) {
        chat.messages.push({ text: text, type: type });
        saveChatSessions();
    }
}

function editChatName(chatId, chatNameElement) {
    const chat = chatSessions.find(function (c) { return c.id === chatId; });
    if (chat) {
        const input = document.createElement('input');
        input.type = 'text';
        input.className = 'chat-name-input';
        input.value = chat.name;

        input.onblur = function () {
            chat.name = input.value;
            saveChatSessions();
            loadChatList();
        };

        input.onkeydown = function (e) {
            if (e.key === 'Enter') {
                input.blur();
            }
        };

        // Replace chatNameElement with the input element
        chatNameElement.parentNode.replaceChild(input, chatNameElement);
        input.focus();
    }
}


function deleteChat(chatId) {
    chatSessions = chatSessions.filter(function (c) { return c.id !== chatId; });
    saveChatSessions();
    loadChatList();
    if (chatSessions.length > 0) {
        loadChat(chatSessions[0].id);
    } else {
        document.getElementById('chat').innerHTML = '';
    }
}

function saveChatSessions() {
    localStorage.setItem('chatSessions', JSON.stringify(chatSessions));
}


// Existing Cohere API call and addMessage code remains the same

var conversationHistory = [];

function getCohereResponse(prompt) {

    conversationHistory.push({ role: 'user', content: prompt });

    var xhr = new XMLHttpRequest();
    xhr.open('POST', 'https://api.cohere.com/v2/chat', true);
    xhr.setRequestHeader('Authorization', 'Bearer ' + apiKey);
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('accept', 'application/json');
    xhr.seenBytes = 0;

    var responseContent = ''; // Store the response content for typing effect
    var streamingTextElement = document.getElementById('streamingText'); // Get the streaming text element
    var currentIndex = 0; // Index to track current character

    // Function that types out received chunks character by character
    function typeCharacter() {
        if (currentIndex < responseContent.length) {
            streamingTextElement.textContent += responseContent.charAt(currentIndex);
            currentIndex++;
            setTimeout(typeCharacter, 100); // Adjust typing speed by changing the delay (in milliseconds)
        }
    }

    currentResponse = ''; // Reset current response

    var responseContainer = addMessage('', 'response', true); // Add a temporary response message box

    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status !== 200) {
            console.error('API Error:', xhr.responseText);
            addMessage('Error: ' + (xhr.responseText || 'Unknown error'), 'error');
        }
    };

    xhr.onprogress = function () {
        var newData = xhr.responseText.slice(xhr.seenBytes);
        xhr.seenBytes = xhr.responseText.length; // Update seenBytes to track read data

        newData.split('\n').forEach(function (line) {
            if (line.trim()) {
                try {
                    var data = JSON.parse(line);
                    if (data.type === 'content-delta' && data.delta.message.content.text) {
                        var newContent = data.delta.message.content.text;
                        if (newContent) {
                            currentResponse += newContent; // Append new content
                            responseContent += newContent; // Append new content for typing effect
                            updateResponseMessage(currentResponse, responseContainer); // Update the response message
                            typeCharacter(); // Call typeCharacter to type out new content
                        }
                    }
                } catch (error) {
                    console.error("Error parsing stream:", error);
                }
            }
        });
    };

    xhr.onloadend = function () {
        if (currentResponse.trim()) {
            saveMessage(currentResponse, 'response'); // Save the complete response
        }
        currentResponse = ''; // Clear current response after saving
    };

    xhr.send(JSON.stringify({
        model: 'command-r',
        messages: conversationHistory.concat([{ role: 'user', content: prompt }]),
        stream: true
    }));
}


function addMessage(text, type, isUpdating) {
    var chat = document.getElementById('chat');
    var message = document.createElement('div');
    message.className = 'message ' + type;
    message.innerText = text;
    chat.appendChild(message);
    chat.scrollTop = chat.scrollHeight;
    if (isUpdating) return message;
}

function updateResponseMessage(text, messageElement) {
    if (messageElement) {
        messageElement.innerText = text;
    }
    document.getElementById('chat').scrollTop = document.getElementById('chat').scrollHeight;
}
